# .github/workflows/windows-build.yml
name: Build rabbitmq-c v0.15.0 on Windows

on:
  push:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-2019
            generator: "Visual Studio 16 2019"
            arch: x64
            toolset: v141
            label: vc15
          - os: windows-2019
            generator: "Visual Studio 16 2019"
            arch: x64
            toolset: v142
            label: vs16
          - os: windows-2022
            generator: "Visual Studio 17 2022"
            arch: x64
            toolset: v143
            label: vs17
          - os: windows-2019
            generator: "Visual Studio 16 2019"
            arch: Win32
            toolset: v141
            label: vc15
          - os: windows-2019
            generator: "Visual Studio 16 2019"
            arch: Win32
            toolset: v142
            label: vs16
          - os: windows-2022
            generator: "Visual Studio 17 2022"
            arch: Win32
            toolset: v143
            label: vs17
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          repository: alanxz/rabbitmq-c
          ref: v0.15.0

      - name: Install OpenSSL (x64 or Win32)
        run: |
          if ('${{ matrix.arch }}' -eq 'x64') {
            # install the 64‑bit MSI into C:\OpenSSL-Win64
            choco install openssl.light -y --no-progress `
              --install-arguments="'/SP- /silent /DIR=C:\OpenSSL-Win64'"
          } else {
            # force the 32‑bit MSI into C:\OpenSSL-Win32
            choco install openssl.light -y --no-progress --x86 `
              --install-arguments="'/SP- /silent /DIR=C:\OpenSSL-Win32'"
          }

      - name: Configure with CMake
        run: |
          $opensslRoot = if ('${{ matrix.arch }}' -eq 'x64') {
            'C:\OpenSSL-Win64'
          } else {
            'C:\OpenSSL-Win32'
          }
          mkdir build
          cd build
          cmake .. `
            -G "${{ matrix.generator }}" `
            -A ${{ matrix.arch }} `
            -T "${{ matrix.toolset }}" `
            -DCMAKE_C_FLAGS=" /W4" `
            -DOPENSSL_ROOT_DIR="$opensslRoot" `
            -DOPENSSL_INCLUDE_DIR="$opensslRoot\include" `
            -DOPENSSL_CRYPTO_LIBRARY="$opensslRoot\lib\libcrypto.lib" `
            -DOPENSSL_SSL_LIBRARY="$opensslRoot\lib\libssl.lib" `
            -DOPENSSL_USE_STATIC_LIBS=TRUE `
            -DCMAKE_BUILD_TYPE=Debug `
            -DBUILD_SHARED_LIBS=ON `
            -DCMAKE_INSTALL_PREFIX="${{ runner.workspace }}/build/install"

      - name: Build & install
        run: cmake --build build --config Release --target install

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: rabbitmq-c-${{ matrix.label }}-${{ matrix.arch }}
          path: build/install
